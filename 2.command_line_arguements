#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <string.h>

#define BUFFER_SIZE 1024
#define MAX_ARGS 32

int main(void) {
    char buffer[BUFFER_SIZE];
    char *args[MAX_ARGS + 1];  // Additional slot for NULL
    int status;

    while (1) {
        printf("#cisfun$ ");
        fflush(stdout);

        if (fgets(buffer, BUFFER_SIZE, stdin) == NULL) {
            printf("\n");
            break;
        }

        // Remove newline character if present
        buffer[strcspn(buffer, "\n")] = '\0';

        // Tokenize command
        char *token = strtok(buffer, " ");
        int i = 0;
        while (token != NULL && i < MAX_ARGS) {
            args[i] = token;
            token = strtok(NULL, " ");
            i++;
        }
        args[i] = NULL;

        // Fork a child process
        pid_t pid = fork();

        if (pid < 0) {
            perror("fork");
            exit(EXIT_FAILURE);
        } else if (pid == 0) {
            // Child process
            if (execvp(args[0], args) == -1) {
                fprintf(stderr, "%s: command not found\n", args[0]);
                exit(EXIT_FAILURE);
            }
        } else {
            // Parent process
            do {
                if (waitpid(pid, &status, WUNTRACED) == -1) {
                    perror("waitpid");
                    exit(EXIT_FAILURE);
                }
            } while (!WIFEXITED(status) && !WIFSIGNALED(status));
        }
    }

    return EXIT_SUCCESS;
}

